# TODO: we probably want to make this HOME_DIRECTORY specification a bit cleaner
import pathlib

HOME_DIRECTORY = pathlib.Path().absolute().parent

import sys
import os
import pdb

sys.path.append(os.path.join(HOME_DIRECTORY, "DELPHI/Feature_Computation"))
import numpy as np
import Pro2Vec_1D.compute as Pro2Vec
from rdkit.ML.Descriptors.MoleculeDescriptors import MolecularDescriptorCalculator


AMINO_ACIDS = "ARNDCQEGHILKMFPSTWYVX"


def initialize_physiochemical_properties():
    """
    TODO: better document which property is which in these arrays
    Initialize property lookup per amino acid for:
    Hydrophobicity; hydrophilicity; net charge index of side chains; polarity; polarizability; SASA: solvent-accessible surface area; volume of side chains; flexibility; accessibility; exposed; turns; antigenicity
    """
    # fmt: off
    extended_prop_aa = {
        'A':[0.620140363440966,0.17686056841772,-0.188749006724763,-0.224734173518473,-0.0836274309924442,-0.553429077935438,-1.32955152740811,-1.38172110737113,-1.02627398746377,-0.509282137090254,-0.585795803359558,-0.781110425203712,-0.520029443227509,0.213921592667873],
        'C':[0.290065653867549,0.066322713156645,-0.440414349024447,-0.226412219190666,-1.04998885579402,-0.476729477285148,-0.489295456136705,-0.77494270388318,-0.578373331393242,-0.427542694668279,-1.63430191054009,-1.21748496442366,0.881041618691234,2.14004615278222],
        'D':[-0.900203753382047,1.42435922064985,1.57290838937303,-0.225916432969336,1.73759217728745,1.55580993994754,-0.724977037103076,-0.501892422313604,-0.698861227178295,0.712268419104827,0.73623363612894,0.746200462066116,1.58587491364422,-0.881976863948911],
        'E':[-0.740167530558572,1.07695453268647,1.57290838937303,-0.224734173518473,1.47741794753318,2.03310948183212,-0.253613875170334,0.0940506525406323,-0.122614769075867,0.794007861526803,1.0097569684369,0.964387731676091,-0.623175779074287,-0.964999474298668],
        'F':[1.1902694072496,-1.60753623793963,-1.1954103759235,-0.22355191406761,-1.16149209711728,-0.535290658862734,1.1707226358873,0.887196708528451,1.27871184494595,-0.90435610879647,-0.904906357718851,-0.999297694813687,0.322332299521183,0.363362291297433],
        'G':[0.480108668470425,0.745340966903249,0.062916335574921,-0.218174540436266,0.250882292977333,-0.553429077935438,-1.80091468934086,-2.03184082539393,-1.7465820600918,0.912075945025212,-0.631383025410886,-0.999297694813687,-0.30514124354672,-0.837698138429041],
        'H':[-0.400090557058688,0.17686056841772,-0.188749006724763,-0.225420646748007,0.771230752485876,-0.370490165573597,0.555901120322853,0.447282365999688,0.322666584912373,-0.304933531035315,1.0097569684369,1.00802518559809,0.262163603610562,0.440850060957206],
        'I':[1.38031242185247,-1.41804277177779,-0.843078896703942,-0.224162112493862,-1.16149209711728,-0.545655469761422,0.105032008908926,-0.0186367652499869,0.702465386843518,-1.24493711888804,-1.26960413412947,-0.868385333047702,-1.14750298629541,0.700987573386442],
        'K':[-1.50033958897008,0.745340966903249,1.57290838937303,-0.224314662100425,1.10574047645565,2.01186161948981,0.443183842469371,0.952208680330731,0.872720022191963,1.37526611874974,1.60239085510416,2.27351134933594,-0.743513170895529,-0.527747059789951],
        'L':[1.06023997620552,-1.60753623793963,-0.843078896703942,-0.22301799044464,-1.27299533844054,-0.53010825341339,0.105032008908926,0.243578187685877,0.702465386843518,-0.972472310814783,-0.996080801821506,-0.737472971281717,-0.700535530959371,1.24340196100485],
        'M':[0.6401448912939,-0.817980128931955,-0.591413554404258,-0.224886723125036,-0.975653361578516,-0.47932068000982,0.463677892988186,0.466785957540372,0.718181199337221,-0.768123704759844,-0.631383025410886,-0.562923155593736,-1.10452534635925,-1.10337049154826],
        'N':[-0.780176586264441,0.950625555245245,1.06957770477366,-0.224810448321755,1.21724371777891,-0.378263773747613,-0.42781330458026,-0.354531952895101,-0.209051737791231,0.871206223814225,0.872995302282922,0.702563008144121,2.74627119192048,-1.38011252604745],
        'P':[0.120027167117606,0.17686056841772,0.062916335574921,-0.215848158936181,-0.120795178100197,-0.553429077935438,-0.458554380358482,-0.759773243795982,-0.649094487614904,0.303571206994949,-0.585795803359558,-0.781110425203712,-0.520029443227509,0.213921592667873],
        'Q':[-0.850192433749711,0.792714333443709,0.163582472494795,-0.223132402649562,0.808398499593628,-0.370490165573597,0.0435498573524813,0.245745253412619,0.367194720311197,0.603282495875526,1.0097569684369,1.00802518559809,0.262163603610562,-0.0572856011413323],
        'R':[-2.5305727733962,0.508474134200945,1.57290838937303,-0.223323089657766,0.808398499593628,2.1414217557234,1.18096966114671,1.60666252980702,1.00368512630615,1.33439639753875,1.51121641100151,1.48803717874003,-0.820872922780613,-0.843232979119025],
        'S':[-0.180040750676409,0.871669944344477,0.213915540954732,-0.224810448321755,0.325217787192839,-0.466882906931394,-1.16559912325759,-1.12817441734224,-0.979126549982658,1.42975908036439,0.143599749461682,-0.0392737085297955,1.31941354604004,-0.073890123211283],
        'T':[-0.050011319632336,0.666385356002481,-0.138415938264826,-0.224886723125036,0.102211304546321,-0.467401147476329,-0.694235961324853,-0.636250497371649,-0.40288009188023,0.603282495875526,0.371535859718319,-0.0392737085297955,0.399692051406267,-0.64397871427961],
        'V':[1.08024450405846,-0.739024518031187,-0.692079691324131,-0.222827303436436,-0.90131786736301,-0.546691950851291,-0.366331153023816,-0.376202610162528,0.12621892874109,-0.727253983548856,-1.17842969002682,-0.824747879125707,-0.545816027189203,1.97953577277269],
        'W':[0.810183378043843,-1.73386521538086,-1.64840799206293,-0.22355191406761,-1.08715660290178,-0.444598563499216,2.39011864175678,1.82987029966151,2.06450246963108,-1.64909325086336,-0.494621359256903,-0.693835517359722,-0.666153419010445,-0.73253616531935],
        'Y':[0.260058862088147,-0.454784318788423,-1.09474423900363,4.2485160771289,-0.789814626039751,-0.469992350201001,1.25269883796256,1.19058591027243,-1.74595342759205,-1.43112140440476,0.645059192026285,0.35346337676816,-0.0816575158786997,0.750801139596297],
    }
    # fmt: on
    for key in extended_prop_aa.keys():
        extended_prop_aa[key] = np.array(extended_prop_aa[key])
    return extended_prop_aa


def initialize_RAAs():
    """
    Relative Amino Acid Propensity for Binding scores taken from
    Chen KH, Hu YJ. Residue-Residue Interaction Prediction via Stacked Meta-Learning. Int J Mol Sci. 2021
    """
    # fmt: off
    Dict_aa_to_RAA = [0.19230769, 0.32051282, 0.1474359, 0.03205128, 0.73076923, 0.17307692, 0.02564103, 0.08333333, 0.35897436, 0.69871795, 0.63461538, 0.00000001, 0.83333333, 1., 0.13461538, 0.16025641, 0.19871795, 0.8525641, 0.69871795, 0.48076923, 0.3878]
    # fmt: on
    Dict_aa_to_RAA = {AMINO_ACIDS[i]: Dict_aa_to_RAA[i] for i in range(21)}

    # TODO(Yitong): why do we need this reverse map?
    Dict_RAA_to_aa = {y: x for x, y in Dict_aa_to_RAA.items()}
    Dict_RAA_to_aa[0.0] = ""
    return Dict_aa_to_RAA, Dict_RAA_to_aa


def initialize_Proc2Vec_embeddings():
    Pro2Vec.LoadPro2Vec()
    Dict_3mer_to_100vec = Pro2Vec.Dict_3mer_to_100vec
    print(list(Dict_3mer_to_100vec.items())[:10])

    for key, value in Dict_3mer_to_100vec.items():
        Dict_3mer_to_100vec[key] = np.sum(value)

    max_key = max(Dict_3mer_to_100vec.keys(), key=(lambda k: Dict_3mer_to_100vec[k]))
    min_key = min(Dict_3mer_to_100vec.keys(), key=(lambda k: Dict_3mer_to_100vec[k]))
    max_value = Dict_3mer_to_100vec[max_key]
    min_value = Dict_3mer_to_100vec[min_key]
    for key, value in Dict_3mer_to_100vec.items():
        Dict_3mer_to_100vec[key] = (Dict_3mer_to_100vec[key] - min_value) / (
            max_value - min_value
        )
    return Dict_3mer_to_100vec


def initialize_aa_to_smiles():
    return {
        "A": "C[C@H](N)C=O",
        "C": "N[C@H](C=O)CS",
        "D": "N[C@H](C=O)CC(=O)O",
        "E": "N[C@H](C=O)CCC(=O)O",
        "F": "N[C@H](C=O)Cc1ccccc1",
        "G": "NCC=O",
        "H": "N[C@H](C=O)Cc1c[nH]cn1",
        "I": "CC[C@H](C)[C@H](N)C=O",
        "K": "NCCCC[C@H](N)C=O",
        "L": "CC(C)C[C@H](N)C=O",
        "M": "CSCC[C@H](N)C=O",
        "N": "NC(=O)C[C@H](N)C=O",
        "P": "O=C[C@@H]1CCCN1",
        "Q": "NC(=O)CC[C@H](N)C=O",
        "R": "N=C(N)NCCC[C@H](N)C=O",
        "S": "N[C@H](C=O)CO",
        "T": "C[C@@H](O)[C@H](N)C=O",
        "V": "CC(C)[C@H](N)C=O",
        "W": "N[C@H](C=O)Cc1c[nH]c2ccccc12",
        "Y": "N[C@H](C=O)Cc1ccc(O)cc1",
    }


def initialize_mol_descriptor_calculator():
    # fmt: off
    chosen_descriptors = ['BalabanJ', 'BertzCT', 'Chi0', 'Chi0n', 'Chi0v', 'Chi1', 'Chi1n', 'Chi1v', 'Chi2n', 'Chi2v', 'Chi3n', 'Chi3v', 'Chi4n', 'Chi4v', 
                        'EState_VSA1', 'EState_VSA10', 'EState_VSA11', 'EState_VSA2', 'EState_VSA3', 'EState_VSA4', 'EState_VSA5', 'EState_VSA6', 'EState_VSA7', 'EState_VSA8', 'EState_VSA9', 
                        'ExactMolWt', 'FpDensityMorgan1', 'FpDensityMorgan2', 'FpDensityMorgan3', 
                        'FractionCSP3', 'HallKierAlpha', 'HeavyAtomCount', 'HeavyAtomMolWt', 'Ipc', 
                        'Kappa1', 'Kappa2', 'Kappa3', 'LabuteASA', 
                        'MaxAbsEStateIndex', 'MaxAbsPartialCharge', 'MaxEStateIndex', 'MaxPartialCharge', 'MinAbsEStateIndex', 'MinAbsPartialCharge', 'MinEStateIndex', 'MinPartialCharge', 
                        'MolLogP', 'MolMR', 'MolWt', 'NHOHCount', 'NOCount', 'NumAliphaticCarbocycles', 'NumAliphaticHeterocycles', 'NumAliphaticRings', 'NumAromaticCarbocycles',
                        'NumAromaticHeterocycles', 'NumAromaticRings', 'NumHAcceptors', 'NumHDonors', 'NumHeteroatoms', 'NumRadicalElectrons', 'NumRotatableBonds', 
                        'NumSaturatedCarbocycles', 'NumSaturatedHeterocycles', 'NumSaturatedRings', 'NumValenceElectrons', 
                        'PEOE_VSA1', 'PEOE_VSA10', 'PEOE_VSA11', 'PEOE_VSA12', 'PEOE_VSA13', 'PEOE_VSA14', 'PEOE_VSA2', 'PEOE_VSA3', 'PEOE_VSA4', 'PEOE_VSA5', 'PEOE_VSA6', 'PEOE_VSA7', 'PEOE_VSA8', 'PEOE_VSA9',
                        'RingCount', 'SMR_VSA1', 'SMR_VSA10', 'SMR_VSA2', 'SMR_VSA3', 'SMR_VSA4', 'SMR_VSA5', 'SMR_VSA6', 'SMR_VSA7', 'SMR_VSA8', 'SMR_VSA9', 
                        'SlogP_VSA1', 'SlogP_VSA10', 'SlogP_VSA11', 'SlogP_VSA12', 'SlogP_VSA2', 'SlogP_VSA3', 'SlogP_VSA4', 'SlogP_VSA5', 'SlogP_VSA6', 'SlogP_VSA7', 'SlogP_VSA8', 'SlogP_VSA9', 
                        'TPSA', 'VSA_EState1', 'VSA_EState10', 'VSA_EState2', 'VSA_EState3', 'VSA_EState4', 'VSA_EState5', 'VSA_EState6', 'VSA_EState7', 'VSA_EState8', 'VSA_EState9'
                        ]
    # fmt: on
    return MolecularDescriptorCalculator(chosen_descriptors)
